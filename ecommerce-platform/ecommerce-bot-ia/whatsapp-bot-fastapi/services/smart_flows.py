import json
import openai
from typing import Dict, List, Any

def _clasificar_productos_por_gpt_para_catalogo(productos: List[Dict]) -> Dict:
    """
    Clasificaci√≥n 100% din√°mica y multi-tenant usando GPT.
    Funciona para cualquier tipo de negocio sin l√≥gica hardcodeada.
    """
    if not productos:
        return {}
    
    try:
        import os
        client = openai.OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
        
        # Crear lista de productos para GPT
        productos_lista = []
        for i, prod in enumerate(productos[:30]):  # L√≠mite para no saturar
            productos_lista.append(f"{i}. {prod.get('name', '')} - {prod.get('description', '')}")
        
        # PROMPT SIMPLIFICADO SIN JSON PARA EVITAR ERRORES DE PARSING
        classification_prompt = f"""Clasifica estos productos en categor√≠as simples.

PRODUCTOS:
{chr(10).join(productos_lista)}

TAREA: Agrupa productos similares en m√°ximo 4 categor√≠as.

RESPONDE SOLO LOS NOMBRES de las categor√≠as separados por comas:
Ejemplo: aceites, flores, semillas, accesorios"""
        
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": classification_prompt}],
            temperature=0.1,
            max_tokens=50
        )
        
        # PROCESAMIENTO SIMPLE SIN JSON
        categorias_texto = response.choices[0].message.content.strip()
        categorias_nombres = [cat.strip() for cat in categorias_texto.split(',') if cat.strip()]
        
        # Crear clasificaci√≥n autom√°tica basada en coincidencias de texto
        clasificacion_dict = {}
        for categoria in categorias_nombres[:4]:  # M√°ximo 4 categor√≠as
            productos_categoria = []
            for i, prod in enumerate(productos):
                nombre_lower = prod.get('name', '').lower()
                desc_lower = prod.get('description', '').lower()
                categoria_lower = categoria.lower()
                
                if categoria_lower in nombre_lower or categoria_lower in desc_lower:
                    productos_categoria.append(i)
            
            if productos_categoria:  # Solo agregar si tiene productos
                clasificacion_dict[categoria] = productos_categoria
        
        # Convertir a formato requerido
        categorias_resultado = {}
        for categoria, indices in clasificacion_dict.items():
            categorias_resultado[categoria] = {
                'productos': [productos[i] for i in indices if i < len(productos)],
                'disponibles': 0,
                'ofertas': 0
            }
        
        print(f"ü§ñ GPT clasific√≥ {len(productos)} productos en {len(categorias_resultado)} categor√≠as din√°micas")
        return categorias_resultado
        
    except Exception as e:
        print(f"‚ùå Error en clasificaci√≥n GPT para cat√°logo: {e}")
        # Fallback: una sola categor√≠a con todos los productos
        return {
            "Productos": {
                'productos': productos,
                'disponibles': 0,
                'ofertas': 0
            }
        }

def detectar_intencion_con_gpt(mensaje: str, productos: list, tenant_info: dict = None) -> Dict:
    """
    DETECCI√ìN 100% DIN√ÅMICA basada en productos REALES del cliente
    Analiza los productos del tenant actual para detectar intenciones
    """
    print(f"üî•üî•üî• DETECCI√ìN DIN√ÅMICA BASADA EN PRODUCTOS REALES: {mensaje} üî•üî•üî•")
    
    mensaje_lower = mensaje.lower()
    palabras_mensaje = mensaje_lower.split()
    
    # PASO 1: BUSCAR PRODUCTOS ESPEC√çFICOS en el inventario real
    productos_encontrados = []
    for producto in productos:
        nombre_producto = producto.get('name', '').lower()
        descripcion_producto = producto.get('description', '').lower()
        
        # Buscar coincidencias en nombre o descripci√≥n
        for palabra in palabras_mensaje:
            if (len(palabra) > 3 and  # Solo palabras significativas
                (palabra in nombre_producto or palabra in descripcion_producto)):
                productos_encontrados.append({
                    'producto': producto,
                    'palabra_coincidente': palabra,
                    'coincidencia_nombre': palabra in nombre_producto,
                    'coincidencia_descripcion': palabra in descripcion_producto
                })
                break
    
    # Si encontr√≥ productos espec√≠ficos, priorizar eso
    if productos_encontrados:
        mejor_coincidencia = productos_encontrados[0]  # Tomar la primera coincidencia
        producto_nombre = mejor_coincidencia['producto']['name']
        palabra_buscada = mejor_coincidencia['palabra_coincidente']
        
        print(f"üéØ Producto espec√≠fico encontrado: '{producto_nombre}' por palabra '{palabra_buscada}'")
        return {
            "intencion": "consulta_producto",
            "producto_mencionado": palabra_buscada,
            "categoria": None,
            "cantidad_mencionada": None,
            "terminos_busqueda": [palabra_buscada],
            "respuesta_sugerida": None
        }
    
    # PASO 2: BUSCAR CATEGOR√çAS DIN√ÅMICAS basadas en productos reales
    categorias_disponibles = set()
    for producto in productos:
        nombre = producto.get('name', '').lower()
        # Extraer categor√≠as de nombres de productos
        if 'semilla' in nombre:
            categorias_disponibles.add('semillas')
        elif any(word in nombre for word in ['flor', 'cogollo']):
            categorias_disponibles.add('flores')
        elif any(word in nombre for word in ['aceite', 'tintura']):
            categorias_disponibles.add('aceites')
        elif any(word in nombre for word in ['brownie', 'galleta', 'chocolate', 'gomita']):
            categorias_disponibles.add('comestibles')
        elif any(word in nombre for word in ['grinder', 'papel', 'bong', 'vaporizador']):
            categorias_disponibles.add('accesorios')
    
    # Detectar si pregunta por alguna categor√≠a
    for categoria in categorias_disponibles:
        if categoria in mensaje_lower or categoria[:-1] in mensaje_lower:  # singular/plural
            print(f"üìÇ Categor√≠a din√°mica detectada: {categoria}")
            return {
                "intencion": "consulta_categoria",
                "producto_mencionado": None,
                "categoria": categoria,
                "cantidad_mencionada": None,
                "terminos_busqueda": [categoria],
                "respuesta_sugerida": None
            }
    
    # PASO 3: DETECCI√ìN DE INTENCIONES GENERALES
    if any(word in mensaje_lower for word in ["hola", "buenas", "buenos d√≠as", "buenas tardes"]):
        categorias_texto = ', '.join(sorted(categorias_disponibles)) if categorias_disponibles else 'nuestros productos'
        print(f"üëã Detectado saludo")
        return {
            "intencion": "saludo",
            "producto_mencionado": None,
            "categoria": None,
            "cantidad_mencionada": None,
            "terminos_busqueda": [],
            "respuesta_sugerida": f"¬°Hola! Bienvenido a {tenant_info.get('name', 'nuestra tienda') if tenant_info else 'nuestra tienda'} üëã ¬øQu√© est√°s buscando hoy: {categorias_texto}?"
        }
    elif any(word in mensaje_lower for word in ["catalogo", "cat√°logo", "todo", "ver todo", "mostrar todo"]):
        print(f"üìã Detectado cat√°logo completo")
        return {
            "intencion": "consulta_catalogo",
            "producto_mencionado": None,
            "categoria": None,
            "cantidad_mencionada": None,
            "terminos_busqueda": ["catalogo"],
            "respuesta_sugerida": None
        }
    else:
        print(f"‚ùì No detectada intenci√≥n espec√≠fica - an√°lisis manual")
        return {
            "intencion": "otro",
            "producto_mencionado": None,
            "categoria": None,
            "cantidad_mencionada": None,
            "terminos_busqueda": palabras_mensaje,
            "respuesta_sugerida": None
        }

def _extraer_categorias_dinamicamente_con_gpt(productos: list) -> list:
    """
    Extrae categor√≠as de productos usando GPT de manera 100% din√°mica
    Funciona para cualquier tipo de negocio sin reglas hardcodeadas
    """
    if not productos:
        return []
    
    try:
        client = openai.OpenAI()
        
        # Tomar muestra de productos para analizar
        muestra_productos = []
        for i, prod in enumerate(productos[:15]):
            muestra_productos.append(f"{i}. {prod.get('name', '')} - {prod.get('description', '')}")
        
        categorias_prompt = f"""Eres un experto clasificador de productos. Analiza estos productos y extrae categor√≠as precisas.

PRODUCTOS:
{chr(10).join(muestra_productos)}

TAREA: Identifica las categor√≠as principales que mejor representen estos productos.

REGLAS CR√çTICAS:
1. Analiza nombres y descripciones cuidadosamente
2. Crea categor√≠as ESPEC√çFICAS y √öTILES para el cliente
3. Usa t√©rminos que el cliente usar√≠a naturalmente
4. M√°ximo 5 categor√≠as, m√≠nimo 3
5. Una palabra por categor√≠a (ej: "semillas" no "semillas-cannabis")

IMPORTANTE:
- Analiza SOLO los productos proporcionados
- NO uses ejemplos predefinidos
- Cada negocio es √∫nico y diferente

RESPUESTA (separadas por comas):"""

        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": categorias_prompt}],
            temperature=0.2,
            max_tokens=50
        )
        
        categorias_texto = response.choices[0].message.content.strip()
        # Procesar respuesta para extraer categor√≠as
        categorias = [cat.strip().lower() for cat in categorias_texto.split(',') if cat.strip()]
        
        print(f"üß† GPT extrajo categor√≠as din√°micamente: {categorias}")
        return categorias[:6]  # M√°ximo 6 categor√≠as
        
    except Exception as e:
        print(f"‚ùå Error extrayendo categor√≠as din√°micamente: {e}")
        return ["productos"]  # Fallback gen√©rico

def _procesar_respuesta_gpt_dinamica(respuesta_gpt: str, categorias_disponibles: list, mensaje: str, tenant_info: dict) -> Dict:
    """
    Procesa la respuesta de GPT de manera 100% din√°mica
    """
    respuesta_gpt = respuesta_gpt.lower().strip()
    
    # Verificar si GPT detect√≥ una categor√≠a espec√≠fica
    if respuesta_gpt in categorias_disponibles:
        return {
            "intencion": "consulta_categoria",
            "producto_mencionado": None,
            "categoria": respuesta_gpt,
            "cantidad_mencionada": None,
            "terminos_busqueda": [respuesta_gpt],
            "respuesta_sugerida": None
        }
    
    # Verificar intenciones est√°ndar
    elif respuesta_gpt == "catalogo":
        return {
            "intencion": "consulta_catalogo",
            "producto_mencionado": None,
            "categoria": None,
            "cantidad_mencionada": None,
            "terminos_busqueda": ["catalogo"],
            "respuesta_sugerida": None
        }
    
    elif respuesta_gpt == "compra":
        return {
            "intencion": "intencion_compra",
            "producto_mencionado": None,
            "categoria": None,
            "cantidad_mencionada": None,
            "terminos_busqueda": [],
            "respuesta_sugerida": None
        }
    
    elif respuesta_gpt == "producto_especifico":
        return {
            "intencion": "consulta_producto",
            "producto_mencionado": mensaje,  # El mensaje completo como producto buscado
            "categoria": None,
            "cantidad_mencionada": None,
            "terminos_busqueda": mensaje.split(),
            "respuesta_sugerida": None
        }
    
    elif respuesta_gpt == "saludo":
        tienda_nombre = tenant_info.get('name', 'nuestra tienda') if tenant_info else 'nuestra tienda'
        categorias_texto = ', '.join(categorias_disponibles) if categorias_disponibles else 'nuestros productos'
        return {
            "intencion": "saludo",
            "producto_mencionado": None,
            "categoria": None,
            "cantidad_mencionada": None,
            "terminos_busqueda": [],
            "respuesta_sugerida": f"¬°Hola! Bienvenido a {tienda_nombre} üëã ¬øQu√© est√°s buscando hoy: {categorias_texto}?"
        }
    
    else:  # "otro" o respuesta no reconocida
        return {
            "intencion": "otro",
            "producto_mencionado": None,
            "categoria": None,
            "cantidad_mencionada": None,
            "terminos_busqueda": mensaje.split(),
            "respuesta_sugerida": None
        }

def _fallback_dinamico_con_gpt(mensaje: str, productos: list, tenant_info: dict) -> Dict:
    """
    Fallback 100% din√°mico usando GPT cuando falla la detecci√≥n principal
    """
    try:
        client = openai.OpenAI()
        
        # Usar GPT para detectar directamente qu√© busca el usuario
        fallback_prompt = f"""El usuario escribi√≥: "{mensaje}"

Bas√°ndote SOLO en este mensaje, ¬øqu√© est√° buscando el usuario?

Responde UNA de estas opciones:
- "categoria" si busca un tipo de producto
- "producto" si busca algo espec√≠fico  
- "catalogo" si quiere ver todo
- "saludo" si es un saludo
- "otro" si no est√° claro

RESPUESTA:"""

        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": fallback_prompt}],
            temperature=0.1,
            max_tokens=10
        )
        
        resultado = response.choices[0].message.content.strip().lower()
        
        if resultado == "categoria":
            # GPT detecta que busca una categor√≠a, usar el mensaje como t√©rmino de b√∫squeda
            return {
                "intencion": "otro",
                "producto_mencionado": None,
                "categoria": None,
                "cantidad_mencionada": None,
                "terminos_busqueda": mensaje.split(),
                "respuesta_sugerida": None
            }
        elif resultado == "producto":
            return {
                "intencion": "consulta_producto",
                "producto_mencionado": mensaje,
                "categoria": None,
                "cantidad_mencionada": None,
                "terminos_busqueda": mensaje.split(),
                "respuesta_sugerida": None
            }
        else:
            return {
                "intencion": "otro",
                "producto_mencionado": None,
                "categoria": None,
                "cantidad_mencionada": None,
                "terminos_busqueda": [],
                "respuesta_sugerida": None
            }
            
    except Exception as e:
        print(f"‚ùå Error en fallback din√°mico: {e}")
        return {
            "intencion": "otro",
            "producto_mencionado": None,
            "categoria": None,
            "cantidad_mencionada": None,
            "terminos_busqueda": [],
            "respuesta_sugerida": None
        }

# FUNCI√ìN ANTIGUA ELIMINADA COMPLETAMENTE PARA EVITAR CONFLICTOS

def ejecutar_consulta_producto(producto_buscado: str, productos: list, tenant_info: dict) -> str:
    """Query espec√≠fica: busca un producto espec√≠fico con stock, precio y disponibilidad"""
    productos_encontrados = []
    
    # B√∫squeda flexible
    for prod in productos:
        if (producto_buscado.lower() in prod['name'].lower() or 
            any(term.lower() in prod['name'].lower() for term in producto_buscado.split())):
            productos_encontrados.append(prod)
    
    if not productos_encontrados:
        return f"‚ùå No tenemos '{producto_buscado}' disponible en {tenant_info.get('name', 'nuestra tienda')}.\n\n¬øTe interesa ver nuestro cat√°logo completo?"
    
    # Mostrar detalles espec√≠ficos de cada producto encontrado
    respuesta = f"Aqu√≠ est√° la informaci√≥n de '{producto_buscado}':\n\n"
    
    for prod in productos_encontrados:
        precio_actual = prod.get('sale_price', prod['price'])
        precio_original = prod['price']
        stock = prod.get('stock', 0)
        
        respuesta += f"üì¶ **{prod['name']}**\n"
        
        # Precio con descuento si aplica
        if prod.get('sale_price') and prod['sale_price'] < prod['price']:
            respuesta += f"üí∞ Precio: ~~${precio_original:,.0f}~~ **${precio_actual:,.0f}** (¬°Oferta!)\n"
        else:
            respuesta += f"üí∞ Precio: **${precio_actual:,.0f}**\n"
        
        # Estado del stock
        if stock > 10:
            respuesta += f"‚úÖ **Disponible** (Stock: {stock})\n"
        elif stock > 0:
            respuesta += f"‚ö†Ô∏è **√öltimas unidades** (Quedan: {stock})\n"
        else:
            respuesta += f"‚ùå **Agotado**\n"
        
        respuesta += f"üìù {prod.get('description', '')}\n\n"
        
        if stock > 0:
            respuesta += f"üõí Para comprar: Escribe 'Quiero {prod['name']}'\n\n"
    
    return respuesta

def _filtrar_productos_con_gpt_interno(productos: list, categoria_solicitada: str) -> list:
    """
    Filtrado GPT 100% din√°mico y multi-tenant.
    Sin l√≥gica hardcodeada - funciona para cualquier tipo de negocio.
    """
    print(f"üî•üî•üî• ENTRANDO A _filtrar_productos_con_gpt_interno con categoria: {categoria_solicitada}")
    if not productos or not categoria_solicitada:
        print(f"üî•üî•üî• SALIENDO: productos vac√≠os o categor√≠a vac√≠a")
        return []
    
    try:
        client = openai.OpenAI()
        
        # Crear lista de productos para clasificar (m√°ximo 20 para no saturar GPT)
        productos_para_clasificar = []
        for i, prod in enumerate(productos[:20]):
            productos_para_clasificar.append({
                "index": i,
                "name": prod.get("name", ""),
                "description": prod.get("description", "")
            })
        
        # PROMPT OPTIMIZADO PARA CLASIFICACI√ìN DIN√ÅMICA
        classification_prompt = f"""Clasifica productos por categor√≠a de manera inteligente.

CATEGOR√çA BUSCADA: "{categoria_solicitada}"

PRODUCTOS DISPONIBLES:
{chr(10).join([f"{p['index']}. {p['name']} - {p['description']}" for p in productos_para_clasificar])}

INSTRUCCIONES:
1. Analiza nombre y descripci√≥n de cada producto
2. Determina cu√°les pertenecen a la categor√≠a "{categoria_solicitada}"
3. Se flexible pero preciso (ej: "aceites" incluye tinturas, extractos)
4. Considera sin√≥nimos y t√©rminos relacionados

RESPONDE SOLO los n√∫meros de productos que pertenecen a "{categoria_solicitada}":
Formato: [0, 3, 7]"""
        
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": classification_prompt}],
            temperature=0.1,
            max_tokens=100
        )
        
        # Parsear respuesta con regex para extraer n√∫meros
        clasificacion_texto = response.choices[0].message.content.strip()
        import re
        numeros = re.findall(r'\d+', clasificacion_texto)
        indices_relevantes = [int(n) for n in numeros if int(n) < len(productos)]
        
        # Retornar productos filtrados
        productos_filtrados = [productos[i] for i in indices_relevantes if i < len(productos)]
        return productos_filtrados
        
    except Exception as e:
        print(f"‚ùå Error en clasificaci√≥n GPT interna: {e}")
        return []

def ejecutar_consulta_categoria(categoria: str, productos: list, tenant_info: dict) -> str:
    """Query espec√≠fica: obtiene productos de una categor√≠a usando clasificaci√≥n GPT inteligente"""
    
    # USAR CLASIFICACI√ìN GPT INTELIGENTE (multi-tenant y din√°mico)
    print(f"üöÄ SMART_FLOWS: Filtrando categor√≠a '{categoria}' con {len(productos)} productos")
    productos_categoria = _filtrar_productos_con_gpt_interno(productos, categoria)
    print(f"üöÄ SMART_FLOWS: GPT retorn√≥ {len(productos_categoria)} productos")
    
    # Fallback si GPT falla: usar l√≥gica simple por nombre de producto
    if not productos_categoria:
        for prod in productos:
            nombre_lower = prod['name'].lower()
            if categoria.lower() in nombre_lower:
                productos_categoria.append(prod)
    
    if not productos_categoria:
        return f"‚ùå No tenemos productos de {categoria} disponibles en este momento."
    
    # Mostrar lista detallada con stock y precios reales
    respuesta = f"üè™ **{categoria.title()} en {tenant_info.get('name', 'Green House')}:**\n\n"
    
    productos_disponibles = 0
    productos_agotados = 0
    
    for i, prod in enumerate(productos_categoria, 1):
        precio_actual = prod.get('sale_price', prod['price'])
        precio_original = prod['price']
        stock = prod.get('stock', 0)
        
        respuesta += f"{i}. **{prod['name']}**\n"
        
        # Precio
        if prod.get('sale_price') and prod['sale_price'] < prod['price']:
            respuesta += f"   üí∞ ~~${precio_original:,.0f}~~ **${precio_actual:,.0f}** (¬°Oferta!)\n"
        else:
            respuesta += f"   üí∞ **${precio_actual:,.0f}**\n"
        
        # Stock detallado
        if stock > 10:
            respuesta += f"   ‚úÖ Disponible\n"
            productos_disponibles += 1
        elif stock > 0:
            respuesta += f"   ‚ö†Ô∏è Quedan {stock}\n"
            productos_disponibles += 1
        else:
            respuesta += f"   ‚ùå Agotado\n"
            productos_agotados += 1
        
        respuesta += f"   üìù {prod.get('description', '')[:50]}...\n\n"
    
    # Resumen
    respuesta += f"üìä **Resumen:** {productos_disponibles} disponibles, {productos_agotados} agotados\n\n"
    respuesta += f"üõí **Para comprar:** Escribe 'Quiero [nombre del producto]'"
    
    return respuesta

def ejecutar_consulta_catalogo(productos: list, tenant_info: dict) -> str:
    """Query espec√≠fica: organiza todo el cat√°logo por categor√≠as con conteos"""
    categorias = {}
    total_productos = len(productos)
    productos_disponibles = sum(1 for p in productos if p.get('stock', 0) > 0)
    productos_ofertas = sum(1 for p in productos if p.get('sale_price') and p['sale_price'] < p['price'])
    
    # CLASIFICACI√ìN 100% DIN√ÅMICA MULTI-TENANT CON GPT
    # NO M√ÅS L√ìGICA HARDCODEADA - CADA TENANT ES DIFERENTE
    categorias = _clasificar_productos_por_gpt_para_catalogo(productos)
    
    # Contar estad√≠sticas por categor√≠a
    for categoria, info in categorias.items():
        for prod in info['productos']:
            if prod.get('stock', 0) > 0:
                info['disponibles'] += 1
            if prod.get('sale_price') and prod['sale_price'] < prod['price']:
                info['ofertas'] += 1
    
    respuesta = f"üåø **Cat√°logo Completo - {tenant_info.get('name', 'Green House')}**\n\n"
    respuesta += f"üìä **Resumen General:**\n"
    respuesta += f"‚Ä¢ Total productos: {total_productos}\n"
    respuesta += f"‚Ä¢ Disponibles: {productos_disponibles}\n"
    respuesta += f"‚Ä¢ En oferta: {productos_ofertas}\n\n"
    
    respuesta += f"üìÇ **Categor√≠as disponibles:**\n\n"
    
    for i, (categoria, info) in enumerate(sorted(categorias.items()), 1):
        respuesta += f"{i}. **{categoria}** ({len(info['productos'])} productos)\n"
        respuesta += f"   ‚úÖ {info['disponibles']} disponibles\n"
        if info['ofertas'] > 0:
            respuesta += f"   üè∑Ô∏è {info['ofertas']} en oferta\n"
        respuesta += "\n"
    
    respuesta += f"üîç **Para ver detalles:**\n"
    respuesta += f"Escribe el nombre de una categor√≠a (ej: 'flores')\n\n"
    respuesta += f"üõí **Para comprar directamente:**\n"
    respuesta += f"Escribe 'Quiero [producto]' (ej: 'Quiero Northern Lights')"
    
    return respuesta

def ejecutar_flujo_inteligente(deteccion: dict, productos: list, tenant_info: dict) -> str:
    """Ejecuta el flujo espec√≠fico basado en la detecci√≥n de GPT"""
    
    # Si GPT sugiri√≥ una respuesta espec√≠fica para saludos o consultas conversacionales, √∫sala
    if deteccion['intencion'] == 'saludo' and deteccion.get('respuesta_sugerida'):
        return deteccion['respuesta_sugerida']
    
    elif deteccion['intencion'] == 'consulta_producto' and deteccion['producto_mencionado']:
        return ejecutar_consulta_producto(deteccion['producto_mencionado'], productos, tenant_info)
    
    elif deteccion['intencion'] == 'consulta_categoria' and deteccion['categoria']:
        print(f"üéØ EJECUTAR_FLUJO_INTELIGENTE: Llamando ejecutar_consulta_categoria para '{deteccion['categoria']}'")
        resultado = ejecutar_consulta_categoria(deteccion['categoria'], productos, tenant_info)
        print(f"üéØ EJECUTAR_FLUJO_INTELIGENTE: Resultado recibido: {len(resultado)} caracteres")
        return resultado
    
    elif deteccion['intencion'] == 'otro' and deteccion.get('terminos_busqueda'):
        # Fallback inteligente: si GPT fall√≥ pero hay t√©rminos de b√∫squeda
        terminos = deteccion['terminos_busqueda']
        print(f"üîß FALLBACK INTELIGENTE: Detectando categor√≠a de t√©rminos {terminos}")
        
        # Detectar categor√≠a com√∫n de los t√©rminos
        terminos_str = ' '.join(terminos).lower()
        categoria_detectada = None
        
        # Usar t√©rminos para inferir categor√≠a de manera gen√©rica
        for producto in productos[:10]:  # Revisar algunos productos para inferir categor√≠as
            nombre_lower = producto.get('name', '').lower()
            if any(term in nombre_lower for term in terminos):
                # Extraer palabra clave del nombre del producto que coincide
                for term in terminos:
                    if term in nombre_lower:
                        categoria_detectada = term
                        break
                if categoria_detectada:
                    break
        
        if categoria_detectada:
            print(f"üîß FALLBACK: Categor√≠a detectada = '{categoria_detectada}'")
            return ejecutar_consulta_categoria(categoria_detectada, productos, tenant_info)
        else:
            print(f"üîß FALLBACK: No se pudo detectar categor√≠a")
            # Si no se detecta nada, usar respuesta sugerida de GPT si existe
            if deteccion.get('respuesta_sugerida'):
                return deteccion['respuesta_sugerida']
    
    elif deteccion['intencion'] == 'consulta_catalogo':
        return ejecutar_consulta_catalogo(productos, tenant_info)
    
    elif deteccion['intencion'] == 'intencion_compra':
        # Flujo de compra espec√≠fico - usar respuesta de GPT si est√° disponible
        if deteccion.get('respuesta_sugerida') and deteccion['producto_mencionado']:
            return deteccion['respuesta_sugerida']
        elif deteccion['producto_mencionado']:
            producto_info = ejecutar_consulta_producto(deteccion['producto_mencionado'], productos, tenant_info)
            return f"{producto_info}\n\nüõí **¬øConfirmas que quieres comprarlo?**"
        else:
            return "¬øQu√© producto espec√≠fico quieres comprar? Puedes escribir 'ver cat√°logo' para ver las opciones."
    
    
    else:
        # Usar respuesta sugerida por GPT si est√° disponible, sino usar por defecto
        if deteccion.get('respuesta_sugerida'):
            return deteccion['respuesta_sugerida']
        else:
            return f"¬øEn qu√© puedo ayudarte en {tenant_info.get('name', 'Green House')}? Puedes preguntarme por productos espec√≠ficos o escribir 'ver cat√°logo'."