"""
ü§ñ INTEGRACI√ìN DE QUERIES SQL CON PROMPTS DEL BOT
Genera instrucciones autom√°ticas para que el bot use las queries configuradas
"""
import logging
from typing import Dict, List, Any, Optional
from prompt_schemas import DatabaseQueries, DatabaseQuery

logger = logging.getLogger(__name__)

class BotPromptIntegration:
    """
    üîó Servicio para integrar queries SQL din√°micas con prompts del bot
    
    Caracter√≠sticas:
    - Genera instrucciones autom√°ticas para el bot
    - Explica qu√© informaci√≥n puede consultar
    - Proporciona ejemplos de uso
    - Documenta par√°metros disponibles
    """
    
    @staticmethod
    def generate_database_instructions(db_queries: DatabaseQueries) -> str:
        """
        Genera instrucciones para el bot sobre qu√© puede consultar en la BD
        
        Args:
            db_queries: Configuraci√≥n de queries disponibles
            
        Returns:
            str: Instrucciones formateadas para incluir en el prompt del sistema
        """
        if not db_queries:
            return ""
        
        instructions = []
        instructions.append("\nüóÉÔ∏è INFORMACI√ìN DE BASE DE DATOS DISPONIBLE:")
        instructions.append("Tienes acceso a consultar informaci√≥n actualizada en tiempo real de la base de datos.")
        instructions.append("Usa esta informaci√≥n para responder preguntas espec√≠ficas de los clientes.\n")
        
        # Agregar instrucciones para cada query activa
        if db_queries.products_query and db_queries.products_query.is_active:
            instructions.append(BotPromptIntegration._format_query_instructions(
                "üì¶ PRODUCTOS", 
                db_queries.products_query,
                [
                    "¬øQu√© productos tienes disponibles?",
                    "¬øTienes productos de la categor√≠a X?",
                    "¬øCu√°nto cuesta el producto Y?",
                    "¬øHay stock del producto Z?"
                ]
            ))
        
        if db_queries.campaigns_query and db_queries.campaigns_query.is_active:
            instructions.append(BotPromptIntegration._format_query_instructions(
                "üì¢ CAMPA√ëAS",
                db_queries.campaigns_query, 
                [
                    "¬øQu√© promociones tienen activas?",
                    "¬øHay alguna campa√±a especial?",
                    "¬øCu√°ndo termina la promoci√≥n actual?"
                ]
            ))
        
        if db_queries.discounts_query and db_queries.discounts_query.is_active:
            instructions.append(BotPromptIntegration._format_query_instructions(
                "üí∞ DESCUENTOS",
                db_queries.discounts_query,
                [
                    "¬øQu√© descuentos est√°n disponibles?",
                    "¬øHay alguna oferta especial?",
                    "¬øCu√°nto descuento puedo obtener?"
                ]
            ))
        
        # Agregar queries personalizadas
        if db_queries.custom_queries:
            for custom_query in db_queries.custom_queries:
                if custom_query.is_active:
                    instructions.append(BotPromptIntegration._format_query_instructions(
                        f"üîß {custom_query.name.upper()}",
                        custom_query,
                        ["Pregunta personalizada sobre " + custom_query.description]
                    ))
        
        instructions.append("\nüéØ INSTRUCCIONES DE USO:")
        instructions.append("- Cuando el cliente pregunte sobre productos, consulta la base de datos")
        instructions.append("- Siempre proporciona informaci√≥n actualizada y precisa") 
        instructions.append("- Si no encuentras informaci√≥n espec√≠fica, sugi√©rele alternativas")
        instructions.append("- Menciona precios, stock y caracter√≠sticas relevantes")
        instructions.append("- Sugiere productos relacionados cuando sea apropiado")
        
        return "\n".join(instructions)
    
    @staticmethod
    def _format_query_instructions(title: str, query: DatabaseQuery, examples: List[str]) -> str:
        """Formatea las instrucciones para una query espec√≠fica"""
        lines = []
        lines.append(f"\n{title}:")
        lines.append(f"- Descripci√≥n: {query.description}")
        lines.append(f"- Puedes consultar hasta {query.max_results} resultados")
        
        if query.parameters:
            params_text = ", ".join([p for p in query.parameters if p != "client_id"])
            if params_text:
                lines.append(f"- Par√°metros disponibles: {params_text}")
        
        lines.append("- Ejemplos de preguntas que puedes responder:")
        for example in examples[:3]:  # M√°ximo 3 ejemplos
            lines.append(f"  ‚Ä¢ {example}")
        
        return "\n".join(lines)
    
    @staticmethod
    def generate_enhanced_system_prompt(
        base_prompt: str, 
        db_queries: DatabaseQueries,
        business_context: Optional[Dict[str, Any]] = None
    ) -> str:
        """
        Genera un prompt del sistema mejorado con capacidades de BD
        
        Args:
            base_prompt: Prompt base configurado por el usuario
            db_queries: Queries de BD configuradas
            business_context: Contexto adicional del negocio
            
        Returns:
            str: Prompt del sistema completo y mejorado
        """
        enhanced_prompt = base_prompt
        
        # Agregar instrucciones de base de datos
        db_instructions = BotPromptIntegration.generate_database_instructions(db_queries)
        if db_instructions:
            enhanced_prompt += "\n\n" + db_instructions
        
        # Agregar contexto de negocio si est√° disponible
        if business_context:
            business_info = BotPromptIntegration._format_business_context(business_context)
            if business_info:
                enhanced_prompt += "\n\n" + business_info
        
        # Agregar instrucciones finales
        enhanced_prompt += "\n\nüöÄ CAPACIDADES ESPECIALES:"
        enhanced_prompt += "\n- Consultas en tiempo real a la base de datos"
        enhanced_prompt += "\n- Informaci√≥n siempre actualizada de productos y promociones"
        enhanced_prompt += "\n- Respuestas precisas basadas en datos reales"
        enhanced_prompt += "\n- Sugerencias personalizadas seg√∫n disponibilidad"
        
        return enhanced_prompt
    
    @staticmethod
    def _format_business_context(business_context: Dict[str, Any]) -> str:
        """Formatea el contexto del negocio para incluir en el prompt"""
        lines = []
        lines.append("üìä CONTEXTO DEL NEGOCIO:")
        
        if business_context.get("business_type"):
            lines.append(f"- Tipo de negocio: {business_context['business_type']}")
        
        if business_context.get("total_products"):
            lines.append(f"- Total de productos: {business_context['total_products']}")
        
        if business_context.get("categories"):
            categories = ", ".join(business_context["categories"][:5])  # M√°ximo 5 categor√≠as
            lines.append(f"- Categor√≠as principales: {categories}")
        
        if business_context.get("active_campaigns"):
            lines.append(f"- Campa√±as activas: {business_context['active_campaigns']}")
        
        if business_context.get("active_discounts"):
            lines.append(f"- Descuentos vigentes: {business_context['active_discounts']}")
        
        return "\n".join(lines) if len(lines) > 1 else ""
    
    @staticmethod
    def generate_query_examples(db_queries: DatabaseQueries) -> List[Dict[str, Any]]:
        """
        Genera ejemplos de preguntas y respuestas para mostrar las capacidades del bot
        
        Returns:
            Lista de ejemplos con pregunta, query usada y tipo de respuesta esperada
        """
        examples = []
        
        if db_queries.products_query and db_queries.products_query.is_active:
            examples.extend([
                {
                    "question": "¬øQu√© productos tienen disponibles?",
                    "query_type": "productos",
                    "parameters": {"category": "%", "limit": 10},
                    "expected_response": "Lista de productos con nombres, precios y stock"
                },
                {
                    "question": "¬øTienes productos de cannabis?",
                    "query_type": "productos", 
                    "parameters": {"category": "cannabis", "limit": 5},
                    "expected_response": "Productos espec√≠ficos de la categor√≠a cannabis"
                }
            ])
        
        if db_queries.discounts_query and db_queries.discounts_query.is_active:
            examples.extend([
                {
                    "question": "¬øQu√© descuentos tienen disponibles?",
                    "query_type": "descuentos",
                    "parameters": {"limit": 5},
                    "expected_response": "Lista de descuentos activos con porcentajes o montos"
                }
            ])
        
        if db_queries.campaigns_query and db_queries.campaigns_query.is_active:
            examples.extend([
                {
                    "question": "¬øHay alguna promoci√≥n especial?", 
                    "query_type": "campanas",
                    "parameters": {"limit": 3},
                    "expected_response": "Campa√±as promocionales activas con fechas"
                }
            ])
        
        return examples
    
    @staticmethod
    def validate_query_integration(base_prompt: str, db_queries: DatabaseQueries) -> Dict[str, Any]:
        """
        Valida que la integraci√≥n de queries con prompts sea coherente
        
        Returns:
            Diccionario con el resultado de la validaci√≥n
        """
        validation = {
            "is_valid": True,
            "warnings": [],
            "suggestions": []
        }
        
        # Verificar que hay al menos una query activa
        active_queries = []
        if db_queries.products_query and db_queries.products_query.is_active:
            active_queries.append("productos")
        if db_queries.campaigns_query and db_queries.campaigns_query.is_active:
            active_queries.append("campa√±as")
        if db_queries.discounts_query and db_queries.discounts_query.is_active:
            active_queries.append("descuentos")
        
        if not active_queries:
            validation["warnings"].append("No hay queries activas configuradas")
            validation["suggestions"].append("Activa al menos una query para aprovechar la funcionalidad de BD")
        
        # Verificar que el prompt menciona productos o informaci√≥n de BD
        prompt_lower = base_prompt.lower()
        database_keywords = ["productos", "catalogo", "inventario", "stock", "precio", "descuento", "promocion", "campa√±a"]
        has_db_references = any(keyword in prompt_lower for keyword in database_keywords)
        
        if not has_db_references and active_queries:
            validation["suggestions"].append("Considera mencionar productos o informaci√≥n de BD en tu prompt base")
        
        validation["active_queries_count"] = len(active_queries)
        validation["active_queries"] = active_queries
        
        return validation