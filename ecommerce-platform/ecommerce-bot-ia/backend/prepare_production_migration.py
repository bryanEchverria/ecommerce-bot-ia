#!/usr/bin/env python3
"""
Prepare production migration package
"""
import os
import shutil
from datetime import datetime

def create_production_package():
    """Create a production-ready migration package"""
    
    # Create migration package directory
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    package_dir = f"production_migration_{timestamp}"
    
    if os.path.exists(package_dir):
        shutil.rmtree(package_dir)
    
    os.makedirs(package_dir)
    
    print(f"üì¶ Creating production migration package: {package_dir}")
    
    # Files to include in package
    files_to_copy = [
        ("postgres_tenant_migration.sql", "1_migration.sql"),
        ("apply_postgres_tenant_migration.py", "2_apply_migration.py"), 
        ("test_postgres_tenant_migration.py", "3_verify_migration.py"),
        ("check_production_schema.py", "4_check_schema.py"),
        ("production_migration_plan.md", "README_MIGRATION_PLAN.md"),
        ("add_tenant_id_multi_tenant_support.py", "alembic_migration.py"),
    ]
    
    copied_files = []
    
    for source, target in files_to_copy:
        source_path = source
        target_path = os.path.join(package_dir, target)
        
        if os.path.exists(source_path):
            shutil.copy2(source_path, target_path)
            copied_files.append(target)
            print(f"  ‚úÖ {source} ‚Üí {target}")
        else:
            print(f"  ‚ùå {source} not found")
    
    # Create execution script
    execution_script = f"""#!/bin/bash
# Production Migration Execution Script
# Generated: {datetime.now().isoformat()}

set -e  # Exit on any error

echo "üöÄ Starting tenant_id migration for production"
echo "Time: $(date)"

# Pre-flight checks
echo "1Ô∏è‚É£ Running pre-flight checks..."
python3 4_check_schema.py

echo "2Ô∏è‚É£ Creating database backup..."
# Uncomment and configure for your production setup:
# pg_dump -h [PROD_HOST] -U [USER] -d ecommerce > backup_pre_tenant_migration_$(date +%Y%m%d_%H%M%S).sql

echo "3Ô∏è‚É£ Applying migration..."
python3 2_apply_migration.py

echo "4Ô∏è‚É£ Verifying migration..."
python3 3_verify_migration.py

echo "‚úÖ Migration completed successfully!"
echo "Time: $(date)"

echo ""
echo "Next steps:"
echo "- Restart application services"
echo "- Run health checks"
echo "- Monitor logs for tenant_id related issues"
"""
    
    script_path = os.path.join(package_dir, "run_migration.sh")
    with open(script_path, 'w') as f:
        f.write(execution_script)
    
    os.chmod(script_path, 0o755)
    copied_files.append("run_migration.sh")
    print(f"  ‚úÖ Created run_migration.sh")
    
    # Create rollback script
    rollback_script = f"""#!/bin/bash
# Production Rollback Script
# Generated: {datetime.now().isoformat()}

set -e

echo "üîÑ Rolling back tenant_id migration"
echo "Time: $(date)"

echo "‚ö†Ô∏è  This will restore from backup and restart services"
read -p "Are you sure? (type 'ROLLBACK' to confirm): " confirm

if [ "$confirm" != "ROLLBACK" ]; then
    echo "Rollback cancelled"
    exit 1
fi

echo "1Ô∏è‚É£ Stopping services..."
# docker-compose stop backend whatsapp-bot

echo "2Ô∏è‚É£ Restoring database..."
# psql -h [PROD_HOST] -U [USER] -d ecommerce < backup_pre_tenant_migration_*.sql

echo "3Ô∏è‚É£ Starting services..."  
# docker-compose start backend whatsapp-bot

echo "‚úÖ Rollback completed"
echo "Time: $(date)"
"""
    
    rollback_path = os.path.join(package_dir, "rollback.sh")
    with open(rollback_path, 'w') as f:
        f.write(rollback_script)
    
    os.chmod(rollback_path, 0o755)
    copied_files.append("rollback.sh")
    print(f"  ‚úÖ Created rollback.sh")
    
    # Create summary
    summary = f"""# Production Migration Package

üì¶ **Package:** {package_dir}
üïê **Created:** {datetime.now().isoformat()}
üéØ **Target:** PostgreSQL Production Database

## Files Included:
"""
    
    for file in sorted(copied_files):
        summary += f"- {file}\n"
    
    summary += f"""
## Quick Start:

1. **Review the plan:**
   ```bash
   cat README_MIGRATION_PLAN.md
   ```

2. **Run pre-checks:**
   ```bash
   python3 4_check_schema.py
   ```

3. **Execute migration:**
   ```bash
   ./run_migration.sh
   ```

4. **In case of issues:**
   ```bash
   ./rollback.sh
   ```

## Environment Variables Required:

```bash
export POSTGRES_HOST=[production_host]
export POSTGRES_DB=ecommerce
export POSTGRES_USER=[production_user]
export POSTGRES_PASSWORD=[production_password]
```

## ‚ö†Ô∏è IMPORTANT:

- **Backup first:** This migration is irreversible without backup
- **Test in staging:** Always test migration in staging environment first
- **Maintenance window:** Apply during low-traffic period
- **Monitor:** Watch logs after migration for any issues

---
Generated by ecommerce-bot-ia migration tools
"""
    
    summary_path = os.path.join(package_dir, "README.md")
    with open(summary_path, 'w') as f:
        f.write(summary)
    
    print(f"  ‚úÖ Created README.md")
    
    print(f"\nüìã Migration package ready: {package_dir}/")
    print(f"üìÅ Files included: {len(copied_files)} files")
    
    return package_dir

def main():
    print("=" * 60)
    print("PRODUCTION MIGRATION PACKAGE GENERATOR")
    print("=" * 60)
    
    package_dir = create_production_package()
    
    print("\n" + "=" * 60)
    print("PACKAGE READY FOR PRODUCTION")
    print("=" * 60)
    
    print(f"""
üéÅ **Package Location:** {package_dir}/

üìã **Next Steps:**

1. **Review contents:**
   ```bash
   ls -la {package_dir}/
   cat {package_dir}/README.md
   ```

2. **Transfer to production:**
   ```bash
   scp -r {package_dir}/ user@production-server:/tmp/
   ```

3. **Execute on production:**
   ```bash
   cd /tmp/{package_dir}/
   ./run_migration.sh
   ```

‚ö†Ô∏è  **REMEMBER:**
- Create database backup before migration
- Test in staging environment first
- Schedule maintenance window
- Have rollback plan ready

üîó **Support:** Check logs and README_MIGRATION_PLAN.md for details
""")

if __name__ == "__main__":
    main()