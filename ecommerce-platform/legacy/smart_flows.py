import json
import openai
from typing import Dict, List, Any

def detectar_intencion_con_gpt(mensaje: str, productos: list, tenant_info: dict = None) -> Dict:
    """GPT detecta la intenci√≥n espec√≠fica del usuario"""
    try:
        client = openai.OpenAI()
        
        productos_nombres = [p['name'] for p in productos]
        
        # Extraer categor√≠as din√°micamente de los productos reales
        categorias_encontradas = set()
        productos_detalle = []
        
        for prod in productos:
            # Usar la categor√≠a real del producto o extraerla del nombre
            categoria = prod.get('category', 'general')
            if not categoria or categoria == '':
                categoria = 'general'
            
            categorias_encontradas.add(categoria)
            
            productos_detalle.append({
                "nombre": prod['name'],
                "categoria": categoria,
                "precio": prod.get('price', 0),
                "stock": prod.get('stock', 0),
                "descripcion": prod.get('description', '')[:100] + ('...' if len(prod.get('description', '')) > 100 else '')
            })
        
        # Crear lista de categor√≠as din√°micas para el prompt
        categorias_dinamicas = '|'.join(sorted(categorias_encontradas)) if categorias_encontradas else 'general'
        
        # Informaci√≥n de la tienda (completamente din√°mica)
        if tenant_info:
            nombre_tienda = tenant_info.get('name', 'Tienda')
            tipo_tienda = tenant_info.get('type', 'comercio')
        else:
            nombre_tienda = "Tienda"
            tipo_tienda = "comercio general"
        
        prompt = f"""
        Eres un asistente virtual multitienda. Atiendes a diferentes negocios, por lo que debes utilizar los par√°metros {nombre_tienda} y {tipo_tienda} que te proporcionar√©. Tambi√©n recibir√°s una lista de productos (nombre, categor√≠a, precio, stock y descripci√≥n) que corresponde a la tienda actual. La lista de categor√≠as disponibles para esta tienda es: {categorias_dinamicas}.

        PRODUCTOS DISPONIBLES:
        {json.dumps(productos_detalle, ensure_ascii=False, indent=2)}

        MENSAJE DEL CLIENTE: "{mensaje}"

        Tu tarea es analizar cada mensaje del cliente y devolver un objeto JSON que describa su intenci√≥n, el producto solicitado (si coincide exactamente) y, si no existe coincidencia exacta, el producto m√°s parecido de la lista. Sigue estas reglas:

        1. **Reconocer intenciones.** Determina si el cliente quiere:
           - Consultar un producto espec√≠fico ("tienes X", "qu√© es X").
           - Consultar una categor√≠a (por ejemplo, "qu√© [nombre de categor√≠a] tienes", "ver cat√°logo").
           - Comprar ("quiero X", "lo/la quiero comprar", "quiero dos unidades de X").
        2. **Coincidencia de productos.**
           - Compara el nombre del producto mencionado con la lista de productos. Si coincide exactamente (ignorando may√∫sculas/min√∫sculas), registra el nombre exacto en `producto_mencionado` y deja `producto_sugerido` como `null`.
           - Si no coincide, busca el nombre de producto m√°s parecido seg√∫n la lista suministrada (puedes basarte en la similitud de caracteres o palabras). Registra `null` en `producto_mencionado` y coloca el nombre m√°s parecido en `producto_sugerido`.
        3. **Devolver siempre un JSON** con la siguiente estructura (y sin texto adicional):
        {{
          "intencion": "consulta_producto|consulta_categoria|consulta_catalogo|intencion_compra|saludo|otro",
          "producto_mencionado": "nombre exacto del producto si coincide, null si no",
          "producto_sugerido": "nombre del producto m√°s parecido si no hay coincidencia exacta, null si no aplica",
          "categoria": "una de {categorias_dinamicas} si se consulta categor√≠a, null si no aplica",
          "cantidad_mencionada": "entero si el cliente indica cantidad (por ejemplo '2'), null si no",
          "terminos_busqueda": ["lista de palabras clave que usa para buscar"],
          "respuesta_sugerida": "breve mensaje en espa√±ol que siga las reglas de la tienda"
        }}
        4. **Consejos de respuesta.**
           - Si hay un `producto_sugerido` y `producto_mencionado` es null, la `respuesta_sugerida` debe preguntar al cliente si se refer√≠a al producto sugerido (por ejemplo: "¬øQuiz√° te refieres a '<producto_sugerido>'? Responde 's√≠' para confirmarlo o ind√≠came otro producto.").
           - Si la intenci√≥n es de compra y se reconoce el producto, la `respuesta_sugerida` debe pedir la cantidad deseada si no se indica o calcular el subtotal si s√≠ se indica.
           - Mant√©n el tono amable y profesional, responde siempre en espa√±ol y no inventes productos ni precios.

        Recuerda: no incluyas nada fuera de la estructura JSON. Usa exactamente los nombres de los productos de la lista suministrada, y no sugieras productos que no existan.
        """
        
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.1,
            max_tokens=150
        )
        
        respuesta_raw = response.choices[0].message.content.strip()
        if respuesta_raw.startswith('```json'):
            respuesta_raw = respuesta_raw.replace('```json', '').replace('```', '').strip()
        
        return json.loads(respuesta_raw)
        
    except Exception as e:
        print(f"Error detectando intenci√≥n: {e}")
        return {
            "intencion": "otro",
            "producto_mencionado": None,
            "categoria": None,
            "cantidad_mencionada": None,
            "terminos_busqueda": []
        }

def ejecutar_consulta_producto(producto_buscado: str, productos: list, tenant_info: dict) -> str:
    """Query espec√≠fica: busca un producto espec√≠fico con stock, precio y disponibilidad"""
    productos_encontrados = []
    
    # B√∫squeda flexible
    for prod in productos:
        if (producto_buscado.lower() in prod['name'].lower() or 
            any(term.lower() in prod['name'].lower() for term in producto_buscado.split())):
            productos_encontrados.append(prod)
    
    if not productos_encontrados:
        return f"‚ùå No tenemos '{producto_buscado}' disponible en {tenant_info.get('name', 'nuestra tienda')}.\n\n¬øTe interesa ver nuestro cat√°logo completo?"
    
    # Mostrar detalles espec√≠ficos de cada producto encontrado
    respuesta = f"Aqu√≠ est√° la informaci√≥n de '{producto_buscado}':\n\n"
    
    for prod in productos_encontrados:
        precio_actual = prod.get('sale_price', prod['price'])
        precio_original = prod['price']
        stock = prod.get('stock', 0)
        
        respuesta += f"üì¶ **{prod['name']}**\n"
        
        # Precio con descuento si aplica
        if prod.get('sale_price') and prod['sale_price'] < prod['price']:
            respuesta += f"üí∞ Precio: ~~${precio_original:,.0f}~~ **${precio_actual:,.0f}** (¬°Oferta!)\n"
        else:
            respuesta += f"üí∞ Precio: **${precio_actual:,.0f}**\n"
        
        # Estado del stock
        if stock > 10:
            respuesta += f"‚úÖ **Disponible** (Stock: {stock})\n"
        elif stock > 0:
            respuesta += f"‚ö†Ô∏è **√öltimas unidades** (Quedan: {stock})\n"
        else:
            respuesta += f"‚ùå **Agotado**\n"
        
        respuesta += f"üìù {prod.get('description', '')}\n\n"
        
        if stock > 0:
            respuesta += f"üõí Para comprar: Escribe 'Quiero {prod['name']}'\n\n"
    
    return respuesta

def ejecutar_consulta_categoria(categoria: str, productos: list, tenant_info: dict) -> str:
    """Query espec√≠fica: obtiene todos los productos de una categor√≠a con precios y stock"""
    productos_categoria = []
    
    # Usar categor√≠as din√°micas reales de la base de datos
    for prod in productos:
        prod_categoria = prod.get('category', '').lower()
        if categoria.lower() == prod_categoria or categoria.lower() in prod_categoria.lower():
            productos_categoria.append(prod)
    
    if not productos_categoria:
        return f"‚ùå No tenemos productos de {categoria} disponibles en este momento."
    
    # Mostrar lista detallada con stock y precios reales
    respuesta = f"üè™ **{categoria.title()} en {tenant_info.get('name', 'Green House')}:**\n\n"
    
    productos_disponibles = 0
    productos_agotados = 0
    
    for i, prod in enumerate(productos_categoria, 1):
        precio_actual = prod.get('sale_price', prod['price'])
        precio_original = prod['price']
        stock = prod.get('stock', 0)
        
        respuesta += f"{i}. **{prod['name']}**\n"
        
        # Precio
        if prod.get('sale_price') and prod['sale_price'] < prod['price']:
            respuesta += f"   üí∞ ~~${precio_original:,.0f}~~ **${precio_actual:,.0f}** (¬°Oferta!)\n"
        else:
            respuesta += f"   üí∞ **${precio_actual:,.0f}**\n"
        
        # Stock detallado
        if stock > 10:
            respuesta += f"   ‚úÖ Disponible\n"
            productos_disponibles += 1
        elif stock > 0:
            respuesta += f"   ‚ö†Ô∏è Quedan {stock}\n"
            productos_disponibles += 1
        else:
            respuesta += f"   ‚ùå Agotado\n"
            productos_agotados += 1
        
        respuesta += f"   üìù {prod.get('description', '')[:50]}...\n\n"
    
    # Resumen
    respuesta += f"üìä **Resumen:** {productos_disponibles} disponibles, {productos_agotados} agotados\n\n"
    respuesta += f"üõí **Para comprar:** Escribe 'Quiero [nombre del producto]'"
    
    return respuesta

def ejecutar_consulta_catalogo(productos: list, tenant_info: dict) -> str:
    """Query espec√≠fica: organiza todo el cat√°logo por categor√≠as con conteos"""
    categorias = {}
    total_productos = len(productos)
    productos_disponibles = sum(1 for p in productos if p.get('stock', 0) > 0)
    productos_ofertas = sum(1 for p in productos if p.get('sale_price') and p['sale_price'] < p['price'])
    
    # Categorizar usando categor√≠as reales de la base de datos
    for prod in productos:
        # Usar la categor√≠a real del producto
        cat = prod.get('category', 'General')
        if not cat or cat == '':
            cat = 'General'
        
        if cat not in categorias:
            categorias[cat] = {'productos': [], 'disponibles': 0, 'ofertas': 0}
        
        categorias[cat]['productos'].append(prod)
        if prod.get('stock', 0) > 0:
            categorias[cat]['disponibles'] += 1
        if prod.get('sale_price') and prod['sale_price'] < prod['price']:
            categorias[cat]['ofertas'] += 1
    
    respuesta = f"üåø **Cat√°logo Completo - {tenant_info.get('name', 'Green House')}**\n\n"
    respuesta += f"üìä **Resumen General:**\n"
    respuesta += f"‚Ä¢ Total productos: {total_productos}\n"
    respuesta += f"‚Ä¢ Disponibles: {productos_disponibles}\n"
    respuesta += f"‚Ä¢ En oferta: {productos_ofertas}\n\n"
    
    respuesta += f"üìÇ **Categor√≠as disponibles:**\n\n"
    
    for i, (categoria, info) in enumerate(sorted(categorias.items()), 1):
        respuesta += f"{i}. **{categoria}** ({len(info['productos'])} productos)\n"
        respuesta += f"   ‚úÖ {info['disponibles']} disponibles\n"
        if info['ofertas'] > 0:
            respuesta += f"   üè∑Ô∏è {info['ofertas']} en oferta\n"
        respuesta += "\n"
    
    respuesta += f"üîç **Para ver detalles:**\n"
    respuesta += f"Escribe el nombre de una categor√≠a (ej: 'flores')\n\n"
    respuesta += f"üõí **Para comprar directamente:**\n"
    respuesta += f"Escribe 'Quiero [producto]' (ej: 'Quiero Northern Lights')"
    
    return respuesta

def ejecutar_flujo_inteligente(deteccion: dict, productos: list, tenant_info: dict) -> str:
    """Ejecuta el flujo espec√≠fico basado en la detecci√≥n de GPT"""
    
    # Si GPT sugiri√≥ una respuesta espec√≠fica para saludos, √∫sala
    if deteccion['intencion'] == 'saludo' and deteccion.get('respuesta_sugerida'):
        return deteccion['respuesta_sugerida']
    
    # Consulta de producto - manejar coincidencia exacta vs sugerencia
    elif deteccion['intencion'] == 'consulta_producto':
        if deteccion.get('producto_mencionado'):
            # Coincidencia exacta encontrada
            return ejecutar_consulta_producto(deteccion['producto_mencionado'], productos, tenant_info)
        elif deteccion.get('producto_sugerido'):
            # No hay coincidencia exacta, pero hay sugerencia
            if deteccion.get('respuesta_sugerida'):
                return deteccion['respuesta_sugerida']
            else:
                return f"¬øQuiz√° te refieres a '{deteccion['producto_sugerido']}'? Responde 's√≠' para confirmarlo o ind√≠came otro producto."
        else:
            return "‚ùå No encontramos ese producto espec√≠fico. ¬øPodr√≠as ser m√°s espec√≠fico o ver nuestro cat√°logo completo?"
    
    elif deteccion['intencion'] == 'consulta_categoria' and deteccion['categoria']:
        return ejecutar_consulta_categoria(deteccion['categoria'], productos, tenant_info)
    
    elif deteccion['intencion'] == 'consulta_catalogo':
        return ejecutar_consulta_catalogo(productos, tenant_info)
    
    elif deteccion['intencion'] == 'intencion_compra':
        # Flujo de compra espec√≠fico - manejar producto exacto vs sugerido
        if deteccion.get('producto_mencionado'):
            # Producto encontrado exactamente
            if deteccion.get('respuesta_sugerida'):
                return deteccion['respuesta_sugerida']
            else:
                producto_info = ejecutar_consulta_producto(deteccion['producto_mencionado'], productos, tenant_info)
                return f"{producto_info}\n\nüõí **¬øConfirmas que quieres comprarlo?**"
        elif deteccion.get('producto_sugerido'):
            # Producto no exacto, pero hay sugerencia
            if deteccion.get('respuesta_sugerida'):
                return deteccion['respuesta_sugerida']
            else:
                return f"¬øQuiz√° quieres comprar '{deteccion['producto_sugerido']}'? Responde 's√≠' para ver los detalles y confirmar la compra."
        else:
            return "¬øQu√© producto espec√≠fico quieres comprar? Puedes escribir 'ver cat√°logo' para ver las opciones."
    
    elif deteccion['intencion'] == 'saludo':
        return f"¬°Hola! Soy tu asistente de ventas de {tenant_info.get('name', 'Green House')}. ¬øEn qu√© puedo ayudarte hoy?"
    
    else:
        # Usar respuesta sugerida por GPT si est√° disponible, sino usar por defecto
        if deteccion.get('respuesta_sugerida'):
            return deteccion['respuesta_sugerida']
        else:
            return f"¬øEn qu√© puedo ayudarte en {tenant_info.get('name', 'Green House')}? Puedes preguntarme por productos espec√≠ficos o escribir 'ver cat√°logo'."