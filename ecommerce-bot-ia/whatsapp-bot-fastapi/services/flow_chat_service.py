"""
Chat service integrado con Flow para pagos
Multi-tenant compatible
"""
import json
import os
from sqlalchemy.orm import Session
from models import FlowProduct, FlowPedido, FlowProductoPedido, FlowSesion
from services.flow_service import crear_orden_flow, get_client_id_for_phone
from services.backoffice_integration import (
    get_real_products_from_backoffice, 
    update_product_stock,
    get_product_by_name_fuzzy,
    get_tenant_from_phone,
    get_tenant_info,
    format_price
)
from datetime import datetime

# Smart flows integration
try:
    from services.smart_flows import detectar_intencion_con_gpt, ejecutar_flujo_inteligente
    SMART_FLOWS_AVAILABLE = True
except ImportError:
    SMART_FLOWS_AVAILABLE = False

# OpenAI integration (if available)
try:
    import openai
    openai.api_key = os.getenv("OPENAI_API_KEY")
    OPENAI_AVAILABLE = bool(os.getenv("OPENAI_API_KEY"))
except ImportError:
    OPENAI_AVAILABLE = False

# Multi-tenant client mapping with Flow support
TENANT_CLIENTS = {
    "+3456789012": {
        "name": "Green House",
        "type": "cannabis",
        "client_id": "green_house",
        "greeting": "üåø ¬°Hola! Bienvenido a Green House\nEspecialistas en productos can√°bicos premium."
    },
    "+1234567890": {
        "name": "Demo Company", 
        "type": "electronics",
        "client_id": "demo_company",
        "greeting": "üì± ¬°Hola! Demo Company - Electr√≥nicos de calidad"
    },
    "+5678901234": {
        "name": "Mundo Canino",
        "type": "pets",
        "client_id": "mundo_canino", 
        "greeting": "üêï ¬°Hola! Mundo Canino - Todo para tu mascota"
    },
    "+9876543210": {
        "name": "Test Store",
        "type": "clothing",
        "client_id": "test_store",
        "greeting": "üëï ¬°Hola! Test Store - Moda y estilo"
    },
    "+56950915617": {
        "name": "Green House",
        "type": "cannabis", 
        "client_id": "green_house",
        "greeting": "üåø ¬°Hola! Bienvenido a Green House\nEspecialistas en productos can√°bicos premium."
    }
}

def menu_principal(client_info, productos):
    """Muestra el cat√°logo de productos directamente en lugar de un men√∫ gen√©rico"""
    catalogo = f"üåø *{client_info['name']} - Cat√°logo disponible:*\n\n"
    for i, prod in enumerate(productos, 1):
        stock_status = "‚úÖ Disponible" if prod['stock'] > 5 else f"‚ö†Ô∏è Quedan {prod['stock']}"
        catalogo += f"{i}. **{prod['name']}** - ${prod['price']:,.0f}\n"
        catalogo += f"   {prod['description']}\n"
        catalogo += f"   {stock_status}\n\n"
    catalogo += "üí¨ *Para comprar:* Escribe el nombre del producto que quieres\n"
    catalogo += "üìù *Ejemplo:* 'Quiero Northern Lights' o solo 'Northern Lights'"
    return catalogo

def obtener_sesion(db: Session, telefono: str, tenant_id: str):
    """Obtiene o crea una sesi√≥n para el usuario"""
    sesion = db.query(FlowSesion).filter_by(telefono=telefono).first()
    if not sesion:
        sesion = FlowSesion(
            telefono=telefono,
            tenant_id=tenant_id,
            estado="INITIAL",
            datos="{}"
        )
        db.add(sesion)
        db.commit()
        db.refresh(sesion)
    return sesion

def guardar_sesion(db: Session, sesion, estado: str = None, datos: dict = None):
    """Guarda cambios en la sesi√≥n"""
    if estado:
        sesion.estado = estado
    if datos:
        sesion.datos = json.dumps(datos)
    sesion.updated_at = datetime.utcnow()
    db.commit()

def obtener_productos_cliente_real(db: Session, telefono: str):
    """
    Obtiene productos reales del backoffice en tiempo real
    Multi-tenant compatible basado en n√∫mero de tel√©fono
    """
    tenant_id = get_tenant_from_phone(telefono)
    productos = get_real_products_from_backoffice(db, tenant_id)
    tenant_info = get_tenant_info(tenant_id)
    
    return productos, tenant_id, tenant_info

def procesar_mensaje_flow(db: Session, telefono: str, mensaje: str, tenant_id: str = None) -> str:
    """
    Procesa mensajes con l√≥gica de Flow integrada
    Multi-tenant compatible - consulta productos reales del backoffice
    """
    # Obtener informaci√≥n del tenant basado en el tel√©fono
    tenant_id = get_tenant_from_phone(telefono)
    tenant_info = get_tenant_info(tenant_id)
    
    # Mantener compatibilidad con c√≥digo existente
    client_info = {
        "name": tenant_info["name"],
        "type": tenant_info["type"],
        "greeting": tenant_info["greeting"]
    }
    
    if not client_info:
        return f"""‚ùå Cliente no configurado: {telefono}
        
‚úÖ Clientes v√°lidos:
‚Ä¢ +3456789012 ‚Üí Green House (can√°bicos)
‚Ä¢ +1234567890 ‚Üí Demo Company (electr√≥nicos)  
‚Ä¢ +5678901234 ‚Üí Mundo Canino (mascotas)
‚Ä¢ +9876543210 ‚Üí Test Store (ropa)

üß™ PRUEBA: Usa uno de estos n√∫meros"""

    sesion = obtener_sesion(db, telefono, tenant_id)
    datos_sesion = json.loads(sesion.datos) if sesion.datos else {}
    
    mensaje_lower = mensaje.lower().strip()
    
    # ========================================
    # PRIORIDAD ABSOLUTA: CONFIRMACI√ìN DE PEDIDOS
    # ========================================
    if sesion.estado == "ORDER_CONFIRMATION":
        print(f"‚ö†Ô∏è Estado ORDER_CONFIRMATION detectado, mensaje: '{mensaje}'")
        if any(word in mensaje_lower for word in ["s√≠", "si", "yes", "confirmo", "ok", "acepto"]):
            print(f"‚úÖ Confirmaci√≥n detectada!")
            datos = json.loads(sesion.datos)
            pedido_data = datos["pedido"]
            total = datos["total"]
            
            # Obtener datos del tenant para el pedido
            productos, tenant_id, tenant_info = obtener_productos_cliente_real(db, telefono)
            
            # Crear pedido en BD
            pedido = FlowPedido(
                telefono=telefono,
                tenant_id=tenant_id,
                total=total,
                estado="pendiente_pago"
            )
            db.add(pedido)
            db.commit()
            db.refresh(pedido)
            
            # Crear productos del pedido y actualizar stock en tiempo real
            for prod_id, item in pedido_data.items():
                # Actualizar stock en la tabla products del backoffice
                stock_actualizado = update_product_stock(db, prod_id, item["cantidad"], tenant_id)
                if not stock_actualizado:
                    return f"‚ùå Error: No hay suficiente stock de {item['nombre']}. Intenta con menos cantidad."
                
                producto_pedido = FlowProductoPedido(
                    pedido_id=pedido.id,
                    producto_id=prod_id,  # Usar string ID del backoffice
                    cantidad=item["cantidad"],
                    precio_unitario=item["precio"]
                )
                db.add(producto_pedido)
            
            db.commit()
            
            # Crear orden de pago en Flow
            descripcion = f"Pedido_{client_info['name']}_{pedido.id}"
            url_pago = crear_orden_flow(str(pedido.id), int(total), descripcion, tenant_id, db)
            
            # Preparar resumen del pedido con formato mejorado
            resumen_productos = ""
            for item in pedido_data.values():
                precio_formateado = format_price(item['precio'] * item['cantidad'], tenant_info['currency'])
                resumen_productos += f"‚Ä¢ {item['cantidad']} x {item['nombre']} = {precio_formateado}\n"
            
            total_formateado = format_price(total, tenant_info['currency'])
            respuesta = f"""üéâ **¬°Pedido confirmado!** #{pedido.id}

üõí **Tu compra:**
{resumen_productos}
üí∞ **Total: {total_formateado}**

üí≥ **Para completar tu pedido:**
üëâ Haz clic aqu√≠ para pagar: {url_pago}

‚è∞ **Despu√©s del pago:**
Escribe *"pagado"* y verificaremos tu pago autom√°ticamente."""
            
            guardar_sesion(db, sesion, "ORDER_SCHEDULING", {"pedido_id": pedido.id})
            return respuesta
            
        elif any(word in mensaje_lower for word in ["no", "cancelar", "cancel"]):
            guardar_sesion(db, sesion, "INITIAL", {})
            return "‚ùå **Pedido cancelado**\n\n¬øEn qu√© m√°s puedo ayudarte?"
        
        # Si escribe algo diferente durante la confirmaci√≥n
        else:
            return f"‚ùì No entend√≠ tu respuesta.\n\n‚ö° **Responde claramente:**\n‚Ä¢ **S√ç** - para confirmar el pedido\n‚Ä¢ **NO** - para cancelar\n\nüîÑ ¬øConfirmas tu pedido?"
    
    # Verificar pedido pendiente de pago
    pedido_pendiente = db.query(FlowPedido).filter_by(
        telefono=telefono,
        estado="pendiente_pago"
    ).first()
    
    # Si hay pedido pendiente y no est√° cancelando
    if pedido_pendiente and "cancelar" not in mensaje_lower:
        if mensaje_lower in ["pagado", "ya pagu√©", "pague", "pago"]:
            # Verificar estado en BD (actualizado por callback de Flow)
            pedido_actual = db.query(FlowPedido).filter_by(id=pedido_pendiente.id).first()
            if pedido_actual and pedido_actual.estado == "pagado":
                guardar_sesion(db, sesion, "INITIAL", {})
                return f"‚úÖ ¬°Pago confirmado! Tu pedido #{pedido_actual.id} ha sido procesado.\nGracias por tu compra. üôå"
            else:
                return f"‚ö†Ô∏è A√∫n no hemos recibido la confirmaci√≥n del pago para tu pedido #{pedido_pendiente.id}.\n\nSi ya pagaste, el proceso puede tomar unos minutos."
        
        return f"Tu pedido #{pedido_pendiente.id} est√° pendiente de pago. Si ya pagaste escribe *pagado*, o escribe *cancelar pedido* para anularlo."
    
    # Cancelar pedido
    if "cancelar pedido" in mensaje_lower or "cancelar" in mensaje_lower:
        if pedido_pendiente:
            pedido_pendiente.estado = "cancelado"
            db.commit()
            guardar_sesion(db, sesion, "INITIAL", {})
            productos, tenant_id, tenant_info = obtener_productos_cliente_real(db, telefono)
            return f"‚ùå Tu pedido #{pedido_pendiente.id} ha sido *cancelado*.\n" + menu_principal(client_info, productos)
        else:
            productos, tenant_id, tenant_info = obtener_productos_cliente_real(db, telefono)
            return "No tienes pedidos pendientes para cancelar.\n" + menu_principal(client_info, productos)
    
    # ========================================
    # PRIORIDAD 2: SISTEMA DE FLUJOS INTELIGENTES  
    # ========================================
    if SMART_FLOWS_AVAILABLE and OPENAI_AVAILABLE:
        try:
            print(f"üß† Iniciando detecci√≥n inteligente para: '{mensaje}'")
            
            # Obtener productos para el contexto
            productos, tenant_id, tenant_info = obtener_productos_cliente_real(db, telefono)
            
            if productos:
                # GPT detecta la intenci√≥n espec√≠fica
                deteccion = detectar_intencion_con_gpt(mensaje, productos)
                print(f"üéØ GPT detect√≥: {deteccion}")
                
                # Ejecutar flujo espec√≠fico seg√∫n detecci√≥n
                if deteccion["intencion"] in ["consulta_producto", "consulta_categoria", "consulta_catalogo", "intencion_compra"]:
                    print(f"‚úÖ Ejecutando flujo espec√≠fico para: {deteccion['intencion']}")
                    
                    respuesta_inteligente = ejecutar_flujo_inteligente(deteccion, productos, tenant_info)
                    print(f"üìù Respuesta generada: {len(respuesta_inteligente)} caracteres")
                    
                    # Actualizar sesi√≥n seg√∫n el tipo de consulta
                    if deteccion["intencion"] in ["consulta_categoria", "consulta_catalogo"]:
                        guardar_sesion(db, sesion, "BROWSING", {})
                    elif deteccion["intencion"] == "intencion_compra":
                        # No actualizar sesi√≥n aqu√≠, se maneja en la l√≥gica de compras m√°s abajo
                        pass
                    
                    print("üéâ Flujo inteligente completado exitosamente")
                    return respuesta_inteligente
                    
        except Exception as e:
            print(f"‚ùå Error en flujos inteligentes: {e}")
            import traceback
            traceback.print_exc()
    
    # Saludos - Nuevo prompt: Solo saludo, NO mostrar cat√°logo
    if any(word in mensaje_lower for word in ["hola", "hi", "hello", "buenas", "menu", "inicio"]):
        guardar_sesion(db, sesion, "INITIAL", {})
        productos, tenant_id, tenant_info = obtener_productos_cliente_real(db, telefono)
        # Obtener nombre de tienda din√°micamente
        tienda_nombre = tenant_info.get('name', client_info.get('name', 'nuestra tienda'))
        return f"¬°Hola! Soy tu asistente de ventas de {tienda_nombre}. ¬øEn qu√© puedo ayudarte hoy?"
    
    # Ver cat√°logo - Expandir palabras clave
    catalog_keywords = ["1", "ver catalogo", "ver cat√°logo", "productos", "catalog", "que productos tienes", 
                       "que tienes", "stock", "dame el catalogo", "dame el cat√°logo", "catalogo de semillas",
                       "cat√°logo de semillas", "mostrar productos", "lista de productos", "semillas disponibles"]
    
    if any(keyword in mensaje_lower for keyword in catalog_keywords) or mensaje_lower in catalog_keywords:
        productos, tenant_id, tenant_info = obtener_productos_cliente_real(db, telefono)
        tienda_nombre = tenant_info.get('name', client_info.get('name', 'nuestra tienda'))
        
        if not productos:
            return "Lo siento, no tenemos productos disponibles en este momento."
        
        # Obtener categor√≠as √∫nicas basadas en los nombres de productos
        categorias = set()
        for prod in productos:
            if 'aceite' in prod['name'].lower() or 'cbd' in prod['name'].lower():
                categorias.add('Aceites y CBD')
            elif 'semilla' in prod['name'].lower() or 'auto' in prod['name'].lower():
                categorias.add('Semillas')
            elif any(word in prod['name'].lower() for word in ['flores', 'northern', 'kush', 'dream']):
                categorias.add('Flores')
            elif any(word in prod['name'].lower() for word in ['brownie', 'comestible', 'gummy']):
                categorias.add('Comestibles')
            else:
                categorias.add('Accesorios')
        
        catalogo = f"Estas son nuestras categor√≠as disponibles en {tienda_nombre}:\n\n"
        for i, categoria in enumerate(sorted(categorias), 1):
            catalogo += f"{i}. {categoria}\n"
        
        catalogo += "\n¬øQu√© tipo de producto te interesa?"
        guardar_sesion(db, sesion, "BROWSING", {})
        return catalogo
    
    # Preguntas exploratorias por categor√≠a (NO son intenci√≥n de compra)
    category_questions = ["que semillas tienes", "qu√© semillas tienes", "semillas disponibles", 
                         "que aceites tienes", "qu√© aceites tienes", "aceites disponibles",
                         "que brownies tienes", "qu√© brownies tienes", "brownies disponibles",
                         "que bongs tienes", "qu√© bongs tienes", "bongs disponibles",
                         "que grinders tienes", "qu√© grinders tienes", "grinders disponibles"]
    
    if any(question in mensaje_lower for question in category_questions):
        productos, tenant_id, tenant_info = obtener_productos_cliente_real(db, telefono)
        
        # Determinar categor√≠a solicitada
        categoria = None
        if "semilla" in mensaje_lower:
            categoria = "semilla"
        elif "aceite" in mensaje_lower:
            categoria = "aceite"
        elif "brownie" in mensaje_lower:
            categoria = "brownie"
        elif "bong" in mensaje_lower:
            categoria = "bong"
        elif "grinder" in mensaje_lower:
            categoria = "grinder"
        
        # Filtrar productos por categor√≠a
        productos_filtrados = []
        if categoria:
            productos_filtrados = [p for p in productos if categoria in p['name'].lower()]
        else:
            productos_filtrados = productos
        
        if not productos_filtrados:
            return f"üí° No tenemos {categoria}s disponibles en este momento.\n\nüåø Ver cat√°logo completo: Escribe '1' o 'cat√°logo'"
        
        # Mostrar productos de la categor√≠a
        catalogo = f"üåø *{categoria.title()}s disponibles en {client_info['name']}:*\n\n"
        for i, prod in enumerate(productos_filtrados, 1):
            stock_status = "‚úÖ Disponible" if prod['stock'] > 5 else f"‚ö†Ô∏è Quedan {prod['stock']}"
            precio_formateado = f"${prod['price']:,.0f}"
            catalogo += f"{i}. **{prod['name']}** - {precio_formateado}\n"
            catalogo += f"   {prod['description']}\n"
            catalogo += f"   {stock_status}\n\n"
        catalogo += f"üí¨ *Para comprar:* Escribe 'Quiero [nombre del producto]'\n"
        catalogo += f"üìù *Ejemplo:* 'Quiero {productos_filtrados[0]['name']}'"
        
        guardar_sesion(db, sesion, "BROWSING", {})
        return catalogo
    
    # Intenci√≥n de compra espec√≠fica (palabras que indican compra + nombre de producto)
    purchase_intent_words = ["quiero", "necesito", "comprar", "llevar", "dame", "vendeme"]
    has_purchase_intent = any(word in mensaje_lower for word in purchase_intent_words)
    
    if has_purchase_intent and sesion.estado in ["INITIAL", "BROWSING"]:
        productos, tenant_id, tenant_info = obtener_productos_cliente_real(db, telefono)
        productos_info = {prod['name'].lower(): {"id": prod['id'], "nombre": prod['name'], "precio": prod['price'], "stock": prod['stock']} 
                         for prod in productos}
        
        # Mejorar detecci√≥n de productos (incluir palabras parciales)
        pedido_detectado = {}
        mensaje_words = mensaje_lower.split()
        
        for nombre_prod, info in productos_info.items():
            prod_words = nombre_prod.split()
            # Verificar coincidencia completa o parcial
            if nombre_prod in mensaje_lower or any(word in mensaje_words for word in prod_words):
                # Extraer cantidad del mensaje
                cantidad = 1
                for word in mensaje.split():
                    if word.isdigit():
                        cantidad = int(word)
                        break
                
                # Verificar stock disponible
                if cantidad > info["stock"]:
                    return f"‚ùå Lo siento, solo tenemos {info['stock']} unidades de {info['nombre']} disponibles.\n\n¬øQuieres esa cantidad? Escribe 's√≠' o elige otro producto."
                
                pedido_detectado[info["id"]] = {
                    "nombre": info["nombre"],
                    "precio": info["precio"],
                    "cantidad": cantidad
                }
        
        # Si se detect√≥ un producto espec√≠fico
        if pedido_detectado:
            total = sum(item["precio"] * item["cantidad"] for item in pedido_detectado.values())
            
            resumen = "üõí **Resumen de tu pedido:**\n\n"
            for item in pedido_detectado.values():
                resumen += f"‚Ä¢ {item['cantidad']} x {item['nombre']} = ${item['precio'] * item['cantidad']}\n"
            resumen += f"\nüí∞ **Total: ${total}**\n\n"
            resumen += "‚úÖ ¬øConfirmas este pedido?\n"
            resumen += "üëâ Responde: **S√ç** para confirmar o **NO** para cancelar"
            
            guardar_sesion(db, sesion, "ORDER_CONFIRMATION", {"pedido": pedido_detectado, "total": total})
            return resumen
        
        # Si pregunta por recomendaciones
        elif any(word in mensaje_lower for word in ["recomien", "recomienda", "suger", "cual", "mejor"]):
            if client_info['type'] == 'cannabis':
                return f"üåø **Para principiantes recomiendo:**\n\n‚Ä¢ **Blue Dream** (${productos[0].precio}) - H√≠brida equilibrada, ideal para comenzar\n‚Ä¢ **Northern Lights** (${productos[3].precio}) - Indica suave y relajante\n\nüí¨ Escribe el nombre del que te interesa para comprarlo"
            else:
                return f"üì± **Productos m√°s populares:**\n\n‚Ä¢ **{productos[0].nombre}** (${productos[0].precio})\n‚Ä¢ **{productos[1].nombre}** (${productos[1].precio})\n\nüí¨ Escribe el nombre del que te interesa"
        
        # Si no se detect√≥ producto espec√≠fico pero hay intenci√≥n de compra
        elif any(word in mensaje_lower for word in ["quiero", "necesito", "comprar"]):
            return f"üîç No encontr√© ese producto espec√≠fico.\n\nüí° **Escribe '1' para ver todo el cat√°logo** o dime exactamente qu√© producto buscas.\n\nEjemplo: 'Blue Dream' o 'iPhone'"
    
    
    # Otras opciones del men√∫
    if mensaje_lower == "2":
        return "üìû Para hablar con un ejecutivo, puedes llamarnos al +56 9 1234 5678\n\n" + menu_principal()
    
    if mensaje_lower == "3":
        return "üêõ Para reportar un problema, env√≠a un email a soporte@empresa.com\n\n" + menu_principal()
    
    if mensaje_lower == "4":
        pedidos = db.query(FlowPedido).filter_by(telefono=telefono, tenant_id=tenant_id).all()
        if pedidos:
            respuesta = f"üìã Tus pedidos en {client_info['name']}:\n\n"
            for pedido in pedidos[-3:]:  # √öltimos 3 pedidos
                estado_emoji = {"pendiente_pago": "‚è≥", "pagado": "‚úÖ", "cancelado": "‚ùå"}
                respuesta += f"{estado_emoji.get(pedido.estado, '‚ùì')} Pedido #{pedido.id}\n"
                respuesta += f"   Total: ${pedido.total:.0f} - {pedido.estado.title()}\n"
                respuesta += f"   Fecha: {pedido.created_at.strftime('%d/%m/%Y')}\n\n"
            return respuesta + menu_principal()
        else:
            return f"No tienes pedidos registrados en {client_info['name']}.\n\n" + menu_principal()
    
    # Respuesta por defecto con OpenAI
    if OPENAI_AVAILABLE:
        try:
            client = openai.OpenAI()
            productos, tenant_id, tenant_info = obtener_productos_cliente_real(db, telefono)
            productos_info = [f"{prod['name']} (${prod['price']})" for prod in productos]
            
            # Contexto m√°s espec√≠fico para cada tipo de cliente
            if client_info['type'] == 'cannabis':
                contexto = "Especialista en productos can√°bicos premium. Enf√≥cate en semillas de calidad."
            else:
                contexto = f"Especialista en {client_info['type']}."
            
            prompt = f"""
            Eres un {contexto} para {client_info['name']}.
            
            PRODUCTOS DISPONIBLES: {', '.join(productos_info)}
            
            CLIENTE ESCRIBI√ì: "{mensaje}"
            
            INSTRUCCIONES:
            - Si pregunta por productos espec√≠ficos, muestra SOLO el que pregunta con precio y descripci√≥n
            - Si ya eligi√≥ un producto, NO sugieras otros, pregunta por la cantidad o confirma la compra
            - Si dice "solo quiero X", respeta su decisi√≥n y procede con ESE producto √∫nicamente
            - S√© directo y conciso, m√°ximo 150 caracteres
            - NUNCA ignores lo que el cliente dice claramente
            """
            
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=100
            )
            ai_response = response.choices[0].message.content.strip()
            return ai_response + "\n\n" + menu_principal()
            
        except Exception as e:
            print(f"OpenAI error: {e}")
    
    # Fallback inteligente - Si menciona productos, mostrar cat√°logo directamente
    if any(word in mensaje_lower for word in ["productos", "product", "catalogo", "cat√°logo", "semillas", "stock", "tienes", "disponibles"]):
        productos, tenant_id, tenant_info = obtener_productos_cliente_real(db, telefono)
        if productos:
            catalogo = f"üåø *{client_info['name']} - Cat√°logo disponible:*\n\n"
            for i, prod in enumerate(productos, 1):
                stock_status = "‚úÖ Disponible" if prod['stock'] > 5 else f"‚ö†Ô∏è Quedan {prod['stock']}"
                precio_formateado = format_price(prod['price'], tenant_info['currency'])
                catalogo += f"{i}. **{prod['name']}** - {precio_formateado}\n"
                catalogo += f"   {prod['description']}\n"
                catalogo += f"   {stock_status}\n\n"
            catalogo += "üí¨ *Para comprar:* Escribe el nombre del producto que quieres\n"
            catalogo += "üìù *Ejemplo:* 'Quiero Northern Lights' o solo 'Northern Lights'"
            guardar_sesion(db, sesion, "BROWSING", {})
            return catalogo
    
    # Fallback final
    return f"ü§ñ {client_info['name']} - Asistente Virtual\n\nüì± Recib√≠: \"{mensaje}\"\n\nüí° Puedo ayudarte con:\n‚Ä¢ Ver cat√°logo de productos (escribe '1' o 'productos')\n‚Ä¢ Procesar pedidos\n‚Ä¢ Consultar estado de compras\n‚Ä¢ Informaci√≥n general\n\n" + menu_principal()