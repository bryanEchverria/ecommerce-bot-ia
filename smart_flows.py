import json
import openai
from typing import Dict, List, Any

def detectar_intencion_con_gpt(mensaje: str, productos: list) -> Dict:
    """GPT detecta la intenci√≥n espec√≠fica del usuario"""
    try:
        client = openai.OpenAI()
        
        productos_nombres = [p['name'] for p in productos]
        
        prompt = f"""
        Analiza este mensaje del cliente y detecta exactamente qu√© quiere:

        PRODUCTOS DISPONIBLES: {', '.join(productos_nombres)}
        
        MENSAJE: "{mensaje}"
        
        Detecta la intenci√≥n espec√≠fica:
        - "consulta_producto": Pregunta por UN producto espec√≠fico (ej: "tienes northern lights?")
        - "consulta_categoria": Pregunta por una categor√≠a (ej: "que flores tienes")  
        - "consulta_catalogo": Quiere ver todo el cat√°logo
        - "intencion_compra": Quiere comprar algo espec√≠fico (ej: "quiero aceite cbd")
        - "consulta_precios": Pregunta por precios
        - "consulta_stock": Pregunta por disponibilidad/stock
        - "saludo": Solo saluda
        - "otro": No est√° claro qu√© quiere

        RESPONDE SOLO EN JSON:
        {{
            "intencion": "una de las opciones arriba",
            "producto_mencionado": "nombre del producto si menciona uno espec√≠fico, null si no",
            "categoria": "flores|semillas|aceites|comestibles|accesorios|null",
            "cantidad_mencionada": "n√∫mero si menciona cantidad, null si no",
            "terminos_busqueda": ["palabras clave que usa para buscar"]
        }}
        """
        
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.1,
            max_tokens=150
        )
        
        respuesta_raw = response.choices[0].message.content.strip()
        if respuesta_raw.startswith('```json'):
            respuesta_raw = respuesta_raw.replace('```json', '').replace('```', '').strip()
        
        return json.loads(respuesta_raw)
        
    except Exception as e:
        print(f"Error detectando intenci√≥n: {e}")
        return {
            "intencion": "otro",
            "producto_mencionado": None,
            "categoria": None,
            "cantidad_mencionada": None,
            "terminos_busqueda": []
        }

def ejecutar_consulta_producto(producto_buscado: str, productos: list, tenant_info: dict) -> str:
    """Query espec√≠fica: busca un producto espec√≠fico con stock, precio y disponibilidad"""
    productos_encontrados = []
    
    # B√∫squeda flexible
    for prod in productos:
        if (producto_buscado.lower() in prod['name'].lower() or 
            any(term.lower() in prod['name'].lower() for term in producto_buscado.split())):
            productos_encontrados.append(prod)
    
    if not productos_encontrados:
        return f"‚ùå No tenemos '{producto_buscado}' disponible en {tenant_info.get('name', 'nuestra tienda')}.\n\n¬øTe interesa ver nuestro cat√°logo completo?"
    
    # Mostrar detalles espec√≠ficos de cada producto encontrado
    respuesta = f"Aqu√≠ est√° la informaci√≥n de '{producto_buscado}':\n\n"
    
    for prod in productos_encontrados:
        precio_actual = prod.get('sale_price', prod['price'])
        precio_original = prod['price']
        stock = prod.get('stock', 0)
        
        respuesta += f"üì¶ **{prod['name']}**\n"
        
        # Precio con descuento si aplica
        if prod.get('sale_price') and prod['sale_price'] < prod['price']:
            respuesta += f"üí∞ Precio: ~~${precio_original:,.0f}~~ **${precio_actual:,.0f}** (¬°Oferta!)\n"
        else:
            respuesta += f"üí∞ Precio: **${precio_actual:,.0f}**\n"
        
        # Estado del stock
        if stock > 10:
            respuesta += f"‚úÖ **Disponible** (Stock: {stock})\n"
        elif stock > 0:
            respuesta += f"‚ö†Ô∏è **√öltimas unidades** (Quedan: {stock})\n"
        else:
            respuesta += f"‚ùå **Agotado**\n"
        
        respuesta += f"üìù {prod.get('description', '')}\n\n"
        
        if stock > 0:
            respuesta += f"üõí Para comprar: Escribe 'Quiero {prod['name']}'\n\n"
    
    return respuesta

def ejecutar_consulta_categoria(categoria: str, productos: list, tenant_info: dict) -> str:
    """Query espec√≠fica: obtiene todos los productos de una categor√≠a con precios y stock"""
    productos_categoria = []
    
    for prod in productos:
        nombre_lower = prod['name'].lower()
        if categoria == 'flores' and any(word in nombre_lower for word in ['northern', 'kush', 'widow', 'flores']):
            productos_categoria.append(prod)
        elif categoria == 'semillas' and 'semilla' in nombre_lower:
            productos_categoria.append(prod)
        elif categoria == 'aceites' and ('aceite' in nombre_lower or 'cbd' in nombre_lower):
            productos_categoria.append(prod)
        elif categoria == 'comestibles' and any(word in nombre_lower for word in ['brownie', 'comestible']):
            productos_categoria.append(prod)
        elif categoria == 'accesorios' and any(word in nombre_lower for word in ['grinder', 'bong', 'papel', 'vaporizador']):
            productos_categoria.append(prod)
    
    if not productos_categoria:
        return f"‚ùå No tenemos productos de {categoria} disponibles en este momento."
    
    # Mostrar lista detallada con stock y precios reales
    respuesta = f"üè™ **{categoria.title()} en {tenant_info.get('name', 'Green House')}:**\n\n"
    
    productos_disponibles = 0
    productos_agotados = 0
    
    for i, prod in enumerate(productos_categoria, 1):
        precio_actual = prod.get('sale_price', prod['price'])
        precio_original = prod['price']
        stock = prod.get('stock', 0)
        
        respuesta += f"{i}. **{prod['name']}**\n"
        
        # Precio
        if prod.get('sale_price') and prod['sale_price'] < prod['price']:
            respuesta += f"   üí∞ ~~${precio_original:,.0f}~~ **${precio_actual:,.0f}** (¬°Oferta!)\n"
        else:
            respuesta += f"   üí∞ **${precio_actual:,.0f}**\n"
        
        # Stock detallado
        if stock > 10:
            respuesta += f"   ‚úÖ Disponible\n"
            productos_disponibles += 1
        elif stock > 0:
            respuesta += f"   ‚ö†Ô∏è Quedan {stock}\n"
            productos_disponibles += 1
        else:
            respuesta += f"   ‚ùå Agotado\n"
            productos_agotados += 1
        
        respuesta += f"   üìù {prod.get('description', '')[:50]}...\n\n"
    
    # Resumen
    respuesta += f"üìä **Resumen:** {productos_disponibles} disponibles, {productos_agotados} agotados\n\n"
    respuesta += f"üõí **Para comprar:** Escribe 'Quiero [nombre del producto]'"
    
    return respuesta

def ejecutar_consulta_catalogo(productos: list, tenant_info: dict) -> str:
    """Query espec√≠fica: organiza todo el cat√°logo por categor√≠as con conteos"""
    categorias = {}
    total_productos = len(productos)
    productos_disponibles = sum(1 for p in productos if p.get('stock', 0) > 0)
    productos_ofertas = sum(1 for p in productos if p.get('sale_price') and p['sale_price'] < p['price'])
    
    # Categorizar y contar
    for prod in productos:
        nombre_lower = prod['name'].lower()
        if any(word in nombre_lower for word in ['northern', 'kush', 'widow']):
            cat = 'Flores'
        elif 'semilla' in nombre_lower:
            cat = 'Semillas'
        elif 'aceite' in nombre_lower or 'cbd' in nombre_lower:
            cat = 'Aceites y CBD'
        elif 'brownie' in nombre_lower:
            cat = 'Comestibles'
        else:
            cat = 'Accesorios'
        
        if cat not in categorias:
            categorias[cat] = {'productos': [], 'disponibles': 0, 'ofertas': 0}
        
        categorias[cat]['productos'].append(prod)
        if prod.get('stock', 0) > 0:
            categorias[cat]['disponibles'] += 1
        if prod.get('sale_price') and prod['sale_price'] < prod['price']:
            categorias[cat]['ofertas'] += 1
    
    respuesta = f"üåø **Cat√°logo Completo - {tenant_info.get('name', 'Green House')}**\n\n"
    respuesta += f"üìä **Resumen General:**\n"
    respuesta += f"‚Ä¢ Total productos: {total_productos}\n"
    respuesta += f"‚Ä¢ Disponibles: {productos_disponibles}\n"
    respuesta += f"‚Ä¢ En oferta: {productos_ofertas}\n\n"
    
    respuesta += f"üìÇ **Categor√≠as disponibles:**\n\n"
    
    for i, (categoria, info) in enumerate(sorted(categorias.items()), 1):
        respuesta += f"{i}. **{categoria}** ({len(info['productos'])} productos)\n"
        respuesta += f"   ‚úÖ {info['disponibles']} disponibles\n"
        if info['ofertas'] > 0:
            respuesta += f"   üè∑Ô∏è {info['ofertas']} en oferta\n"
        respuesta += "\n"
    
    respuesta += f"üîç **Para ver detalles:**\n"
    respuesta += f"Escribe el nombre de una categor√≠a (ej: 'flores')\n\n"
    respuesta += f"üõí **Para comprar directamente:**\n"
    respuesta += f"Escribe 'Quiero [producto]' (ej: 'Quiero Northern Lights')"
    
    return respuesta

def ejecutar_flujo_inteligente(deteccion: dict, productos: list, tenant_info: dict) -> str:
    """Ejecuta el flujo espec√≠fico basado en la detecci√≥n de GPT"""
    
    if deteccion['intencion'] == 'consulta_producto' and deteccion['producto_mencionado']:
        return ejecutar_consulta_producto(deteccion['producto_mencionado'], productos, tenant_info)
    
    elif deteccion['intencion'] == 'consulta_categoria' and deteccion['categoria']:
        return ejecutar_consulta_categoria(deteccion['categoria'], productos, tenant_info)
    
    elif deteccion['intencion'] == 'consulta_catalogo':
        return ejecutar_consulta_catalogo(productos, tenant_info)
    
    elif deteccion['intencion'] == 'intencion_compra':
        # Flujo de compra espec√≠fico
        if deteccion['producto_mencionado']:
            producto_info = ejecutar_consulta_producto(deteccion['producto_mencionado'], productos, tenant_info)
            return f"{producto_info}\n\nüõí **¬øConfirmas que quieres comprarlo?**"
        else:
            return "¬øQu√© producto espec√≠fico quieres comprar? Puedes escribir 'ver cat√°logo' para ver las opciones."
    
    elif deteccion['intencion'] == 'saludo':
        return f"¬°Hola! Soy tu asistente de ventas de {tenant_info.get('name', 'Green House')}. ¬øEn qu√© puedo ayudarte hoy?"
    
    else:
        # Respuesta por defecto
        return f"¬øEn qu√© puedo ayudarte en {tenant_info.get('name', 'Green House')}? Puedes preguntarme por productos espec√≠ficos o escribir 'ver cat√°logo'."